const express = require('express');
const router = express.Router();
const authMiddleware = require('../middleware/authMiddleware');
const checkProjectRole = require('../middleware/checkProjectRole');
const { Subtask, Task } = require('../config/db');
const { ProjectMember } = require('../config/db');
// POST /subtasks ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ
router.post(
  '/',
  authMiddleware,
  async (req, res, next) => {
    try {
      const { taskId } = req.body;
      const task = await Task.findByPk(taskId);
      if (!task) return res.status(404).json({ message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

      req.body.projectId = task.projectId; // üí° –¥–ª—è checkProjectRole
      next();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ projectId –∏–∑ –∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ projectId' });
    }
  },
  checkProjectRole(['owner', 'manager']),
  async (req, res) => {
    console.log('üì© POST /subtasks ‚Äî req.body:', req.body);
    try {
      const { taskId, title } = req.body;
      const newSubtask = await Subtask.create({ taskId, title, completed: false });
      res.json(newSubtask);
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏' });
    }
  }
);

// PUT /subtasks/:id ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
router.put(
  '/:id',
  authMiddleware,
  async (req, res, next) => {
    try {
      const subtask = await Subtask.findByPk(req.params.id, {
        include: { model: Task, as: 'task', attributes: ['projectId'] }
      });

      if (!subtask || !subtask.task) {
        return res.status(404).json({ message: '–ü–æ–¥–∑–∞–¥–∞—á–∞ –∏–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      req.body.projectId = subtask.task.projectId;
      req.subtask = subtask; // –ø–µ—Ä–µ–¥–∞—ë–º –ø–æ–¥–∑–∞–¥–∞—á—É –¥–∞–ª—å—à–µ
      next();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥–∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–¥–∑–∞–¥–∞—á–∏' });
    }
  },
  async (req, res) => {
    const { title, completed } = req.body;
    const { id: userId } = req.user;
    const projectId = req.body.projectId;

    try {
      // –ò—â–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
      const membership = await ProjectMember.findOne({
        where: { userId, projectId }
      });

      const role = membership?.role;

      // –£—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
      const isOnlyCompletedChange =
        typeof completed !== 'undefined' &&
        typeof title === 'undefined';

      if (
        !membership ||
        (role === 'member' && !isOnlyCompletedChange)
      ) {
        return res.status(403).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏' });
      }

      const updates = {};
      if (typeof title !== 'undefined') updates.title = title;
      if (typeof completed !== 'undefined') updates.completed = completed;

      const [updated] = await Subtask.update(updates, {
        where: { id: req.params.id }
      });

      if (updated === 0) {
        return res.status(404).json({ message: '–ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }

      res.json({ message: '–ü–æ–¥–∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏' });
    }
  }
);


// GET /subtasks/task/:taskId ‚Äî –ø–æ–ª—É—á–µ–Ω–∏–µ
router.get('/task/:taskId', authMiddleware, checkProjectRole(['owner', 'manager', 'member']), async (req, res) => {
  try {
    const subtasks = await Subtask.findAll({
      where: { taskId: req.params.taskId },
      include: [
        {
          model: Task,
          as: 'task',
          attributes: ['projectId']
        }
      ]
    });
    

    res.json(subtasks);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á' });
  }
});

// DELETE /subtasks/:id ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏
router.delete('/:id', authMiddleware, checkProjectRole(['owner', 'manager']), async (req, res) => {
  try {
    const deleted = await Subtask.destroy({ where: { id: req.params.id } });
    if (deleted) {
      res.json({ message: '–ü–æ–¥–∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞' });
    } else {
      res.status(404).json({ error: '–ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á–∏' });
  }
});

router.put('/:id/comment', authMiddleware, checkProjectRole(['manager', 'owner']), async (req, res) => {
  const { id } = req.params;
  const { comment } = req.body;

  try {
    const subtask = await Subtask.findByPk(id);
    if (!subtask) return res.status(404).json({ message: '–ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });

    subtask.comment = comment;
    await subtask.save();
    res.json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
module.exports = router;
