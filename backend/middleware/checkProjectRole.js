const { ProjectMember, Task, Subtask } = require('../config/db');

module.exports = (allowedRoles) => {
  return async (req, res, next) => {
    const userId = req.user.id;
    let projectId = req.params.projectId || req.body?.projectId;

    try {
      // üìå –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å projectId —á–µ—Ä–µ–∑ –∑–∞–¥–∞—á—É (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è :id ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, /tasks/:id)
      if (!projectId && req.params?.id) {
        const task = await Task.findByPk(req.params.id);

        if (task) {
          console.log('üìå TASK USER ID:', task.userId);

          // üîê –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É
          if (!task.projectId) {
            if (task.userId === userId) {
              return next();
            } else {
              return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É' });
            }
          }

          projectId = task.projectId;
        }
      }

      // üìå –ï—Å–ª–∏ taskId –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏)
      if (!projectId && req.body?.taskId) {
        const task = await Task.findByPk(req.body.taskId);
        if (task) projectId = task.projectId;
      }

      // üìå –ï—Å–ª–∏ taskId –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, GET /subtasks/task/:taskId)
      if (!projectId && req.params?.taskId) {
        const task = await Task.findByPk(req.params.taskId);
        if (task) projectId = task.projectId;
      }

      // üìå –ï—Å–ª–∏ :id ‚Äî —ç—Ç–æ subtaskId
      if (!projectId && req.params?.id) {
        const subtask = await Subtask.findByPk(req.params.id, {
          include: { model: Task, as: 'task' }
        });

        if (subtask?.task?.projectId) {
          projectId = subtask.task.projectId;
        } else if (subtask?.task && !subtask.task.projectId) {
          // üîê –ü–æ–¥–∑–∞–¥–∞—á–∞ –≤–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É –∑–∞–¥–∞—á–∏
          if (subtask.task.userId === userId) {
            return next();
          } else {
            return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á—É –≤–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞' });
          }
        }
      }

      // üìå –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å projectId ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é
      if (!projectId) {
        const taskId = req.params.id;
        if (taskId) {
          const task = await Task.findByPk(taskId);
          if (task && task.projectId === null && task.userId === userId) {
            return next();
          }
        }

        return res.status(400).json({ message: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å projectId' });
      }

      // üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
      const membership = await ProjectMember.findOne({
        where: { userId, projectId }
      });

      if (!membership) {
        return res.status(403).json({ message: '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞' });
      }

      if (!allowedRoles.includes(membership.role)) {
        return res.status(403).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
      }

      req.projectRole = membership.role;
      next();
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤ checkProjectRole:', err);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞' });
    }
  };
};
