const { ProjectMember, Task, Subtask } = require('../config/db');

module.exports = (allowedRoles) => {
  return async (req, res, next) => {
    const userId = req.user.id;
    let projectId = req.params.projectId || req.body?.projectId;

    try {
      // üìå –ï—Å–ª–∏ projectId –Ω–µ—Ç ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ –ø–æ taskId (–ø—Ä–∏ :id –≤ URL)
      if (!projectId && req.params?.id) {
        const task = await Task.findByPk(req.params.id);

        if (task) {
          console.log('üìå TASK USER ID:', task.userId);

          // üîê –ï—Å–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞ (–±–µ–∑ projectId)
          if (!task.projectId) {
            if (task.userId === userId) {
              console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–≤—Ç–æ—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω');
              return next();
            } else {
              console.log('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É');
              return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É' });
            }
          }

          projectId = task.projectId;
        }
      }

      // üìå –ï—Å–ª–∏ taskId –≤ —Ç–µ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∑–∞–¥–∞—á–∏)
      if (!projectId && req.body?.taskId) {
        const task = await Task.findByPk(req.body.taskId);
        if (task) projectId = task.projectId;
      }

      // üìå –ï—Å–ª–∏ taskId –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä GET /subtasks/task/:taskId)
      if (!projectId && req.params?.taskId) {
        const task = await Task.findByPk(req.params.taskId);
        if (task) projectId = task.projectId;
      }

      // üìå –ï—Å–ª–∏ :id ‚Äî —ç—Ç–æ subtaskId
      if (!projectId && req.params?.id) {
        const subtask = await Subtask.findByPk(req.params.id, {
          include: { model: Task, as: 'task' }
        });

        if (subtask?.task?.projectId) {
          projectId = subtask.task.projectId;
        } else if (subtask?.task && !subtask.task.projectId) {
          // üîê –ï—Å–ª–∏ –ø–æ–¥–∑–∞–¥–∞—á–∞ –≤–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä—É
          if (subtask.task.userId === userId) {
            console.log('‚úÖ –ê–≤—Ç–æ—Ä –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω');
            return next();
          } else {
            console.log('‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á—É –≤–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
            return res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á—É –≤–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞' });
          }
        }
      }

      // üìå –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç projectId ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—â—ë —Ä–∞–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
      if (!projectId && req.params?.id) {
        const task = await Task.findByPk(req.params.id);
        if (task && task.projectId === null && task.userId === userId) {
          console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–≤—Ç–æ—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω');
          return next();
        }
      }

      // üìå –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç projectId ‚Äî –æ—à–∏–±–∫–∞
      if (!projectId) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å projectId');
        return res.status(400).json({ message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å projectId' });
      }

      // üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
      const membership = await ProjectMember.findOne({
        where: { userId, projectId }
      });

      if (!membership) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞');
        return res.status(403).json({ message: '–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞' });
      }

      if (!allowedRoles.includes(membership.role)) {
        console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (—Ä–æ–ª—å: ${membership.role}, –Ω—É–∂–Ω–æ: ${allowedRoles.join(', ')})`);
        return res.status(403).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤' });
      }

      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞. –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', membership.role);
      req.projectRole = membership.role;
      next();
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ checkProjectRole:', err);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞', error: err.message });
    }
  };
};
