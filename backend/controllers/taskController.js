const { Task, Project, ProjectMember } = require('../config/db');
const Label = require('../models/label');
const Notification = require('../models/notification');
const { Op } = require('sequelize');
const { User } = require('../config/db');
const Subtask = require('../models/subtask');


const updateTask = async (req, res) => {
  try {
    const {
      title,
      description,
      status,
      priority,
      dueDate,
      userId,
      orderIndex,
      x,
      y
    } = req.body;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    await Task.update(
      { title, description, status, priority, dueDate, userId, orderIndex, x, y },
      { where: { id: req.params.id } }
    );

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    const updatedTask = await Task.findByPk(req.params.id);

    if (!updatedTask) {
      return res.status(404).json({ message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.json(updatedTask);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏' });
  }
};







const deleteTask = async (req, res) => {
  const taskId = req.params.id;

  try {
    const task = await Task.findOne({ where: { id: taskId } });

    if (!task) {
      console.log('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return res.status(404).json({ message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    await task.destroy(); // –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞

    console.log('‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞');
    res.json({ message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err.message);
    console.error(err.stack);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏', error: err.message });
  }
};

const getTasks = async (req, res) => {
    const userId = req.user.id;
    const { labelId, status, dueBefore, dueAfter, search } = req.query;
  
    try {
      const whereClause = { userId };
  
      if (status) {
        whereClause.status = status;
      }
  
      if (dueBefore || dueAfter) {
        whereClause.dueDate = {};
        if (dueBefore) whereClause.dueDate[Op.lte] = new Date(dueBefore);
        if (dueAfter) whereClause.dueDate[Op.gte] = new Date(dueAfter);
      }
  
      if (search) {
        whereClause[Op.or] = [
          { title: { [Op.like]: `%${search}%` } },
          { description: { [Op.like]: `%${search}%` } }
        ];
      }
  
      const tasks = await Task.findAll({
        where: whereClause,
        include: labelId
          ? [{
              model: Label,
              where: { id: labelId },
              through: { attributes: [] }
            }]
          : []
      });
  
      res.json(tasks);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', err);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};


const addTask = async (req, res) => {
  console.log('==> req.user:', req.user);
    const { title, description, status, priority, dueDate, projectId } = req.body;
  
    try {
      const newTask = await Task.create({
        title,
        description,
        status: status || '–Ω–æ–≤–∞—è',
        priority: priority || '—Å—Ä–µ–¥–Ω–∏–π',
        dueDate,
        projectId,
        userId: req.user.id
      });
  
      // üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      await Notification.create({
        userId: req.user.id,
        message: `–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: ${title}`
      });
  
      res.status(201).json({ message: '–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞', task: newTask });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};
  
const getTaskById = async (req, res) => {
    try {
      const taskId = req.params.id;
      const userId = req.user.id;
  
      const task = await Task.findOne({
        where: {
          id: taskId,
          userId: userId
        }
      });
  
      if (!task) {
        return res.status(404).json({ message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
      }
  
      res.json(task);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:', err);
      res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
};
  
const getTasksByProject = async (req, res) => {
  const { projectId } = req.params;
  const userId = req.user.id;

  try {
    const project = await Project.findOne({
      where: {
        id: projectId,
        [Op.or]: [
          { ownerId: userId },
          { '$members.userId$': userId }
        ]
      },
      include: [
        {
          model: ProjectMember,
          as: 'members',
          required: false
        }
      ]
    });

    if (!project) {
      return res.status(403).json({ message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–¥–∞—á–∞–º —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞' });
    }

    const tasks = await Task.findAll({
      where: { projectId },
      include: [
        {
          model: User,
          as: 'executor',
          attributes: ['id', 'fullName', 'email']
        }
      ]
    });

    res.json(tasks);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç—É:', err);
    res.status(500).json({
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: err.message,
      stack: err.stack
    });
  }
};


const addComment = async (req, res) => {
  try {
    const { content } = req.body;
    const taskId = req.params.id;
    const userId = req.user.id;

    const comment = await Comment.create({ content, taskId, userId });
    res.status(201).json(comment);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
  }
};

const addLabel = async (req, res) => {
  try {
    const { labelId } = req.body;
    const taskId = req.params.id;

    const task = await Task.findByPk(taskId);
    const label = await Label.findByPk(labelId);
    if (!task || !label) return res.status(404).json({ message: '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–¥–∞—á–∞ –∏–ª–∏ –º–µ—Ç–∫–∞' });

    await task.addLabel(label); // Sequelize —Å–≤—è–∑—å many-to-many
    res.status(200).json({ message: '–ú–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∑–∞–¥–∞—á–µ' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∫–∏' });
  }
};

module.exports = {
    deleteTask,
    updateTask,
    getTaskById,
    getTasks,
    addTask,
    getTasksByProject,
    addComment,
    addLabel
  };
